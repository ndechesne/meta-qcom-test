on:
  workflow_call:
    inputs:
      host:
        required: true
        type: string
      images:
        required: true
        type: string
      machines:
        required: true
        type: string
      url:
        required: true
        type: string
      branch:
        required: true
        type: string
      ref:
        required: true
        type: string
    secrets:
      TUXSUITE_TOKEN:
        required: true

env:
  POKY_URL: http://git.yoctoproject.org/git/poky
  DISTRO: poky
  TCLIBC: glibc musl

jobs:
  build:
    name: Build test for ${{github.event_name}}
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade tuxsuite
    - name: Setup tux plan
      run: |
        cat << EOF > plan.yaml
        name: CI for ${{github.repository}}
        description: ${{github.workflow}} - ${{github.ref}}
        version: 1

        common: &commondata
          container: ${{inputs.host}}
          envsetup: poky/oe-init-build-env
          sources:
            git_trees:
              - branch: ${{inputs.branch}}
                url: $POKY_URL
              - ref: ${{inputs.ref}}
                url: ${{inputs.url}}
          distro: $DISTRO
          target: ${{inputs.images}}
          bblayers_conf:
            - BBLAYERS += '../$(echo ${{github.repository}} | cut -d'/' -f2)/'
          artifacts:
            - \$DEPLOY_DIR
        EOF

        for tclibc in ${TCLIBC}; do
        cat << EOF >> plan.yaml
        ${tclibc}: &${tclibc}
          local_conf:
            - INHERIT += 'buildstats buildstats-summary'
            - INHERIT:remove = 'rm_work'
            - TCLIBC := '${tclibc}'

        EOF
        done

        cat << EOF >> plan.yaml
        jobs:
        EOF

        for tclibc in ${TCLIBC}; do
        cat << EOF >> plan.yaml
        - name: ${tclibc}
          bakes:
        EOF
        for machine in ${{inputs.machines}}; do
        cat << EOF >> plan.yaml
            - { <<: [*commondata, *${tclibc}], machine: ${machine}}
        EOF
        done
        done
        echo "Ready to submit this Tux Plan:"
        cat plan.yaml
    - name: Run build
      run: |
        tuxsuite plan plan.yaml
      env:
        TUXSUITE_TOKEN: ${{ secrets.TUXSUITE_TOKEN }}
